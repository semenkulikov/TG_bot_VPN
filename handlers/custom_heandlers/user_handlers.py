import os

from telebot.types import Message

from config_data.config import CHANNEL_ID
from database.models import User, VPNKey, UserVPNKey
from keyboards.inline.users import user_panel_markup, user_key_actions_markup
from loader import bot, app_logger
from states.states import UserPanel
from utils.work_vpn_keys import revoke_key


@bot.message_handler(commands=["panel"])
def user_panel(message: Message):
    """ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —é–∑–µ—Ä –ø–∞–Ω–µ–ª–∏ """
    cur_user = User.get(User.user_id == message.from_user.id)

    if cur_user.is_subscribed:
        app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.full_name} –∑–∞—à–µ–ª –≤ —é–∑–µ—Ä –ø–∞–Ω–µ–ª—å.")
        bot.send_message(message.from_user.id, "üîß –í—ã –∑–∞—à–ª–∏ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è!\n\n"
                                               "<b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n"
                                                f"üë§ –ò–º—è: {cur_user.full_name}\n"
                                                f"üì± –¢–µ–ª–µ–≥—Ä–∞–º: @{cur_user.username}\n"
                                                f"üì¢ –ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª: {cur_user.is_subscribed}\n\n"
                                               "üîë –í–∞—à–∏ VPN –∫–ª—é—á–∏ üëá",
                         reply_markup=user_panel_markup(cur_user),
                         parse_mode="HTML")
        bot.set_state(message.from_user.id, UserPanel.get_keys)
    else:
        bot.send_message(message.chat.id, f"üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ [–Ω–∞—à –∫–∞–Ω–∞–ª](https://t.me/{CHANNEL_ID[1:]})!\n"
                                          f"–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.",
                         parse_mode="Markdown")


@bot.callback_query_handler(func=None, state=UserPanel.get_keys)
def user_keys_handler(call):
    """ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É VPN –∫–ª—é—á–∞–º–∏ """
    bot.answer_callback_query(callback_query_id=call.id)

    if "VPN - " in call.data:
        # –í—ã–¥–∞—á–∞ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ VPN –∫–ª—é—á—É
        vpn_obj: VPNKey = VPNKey.get_by_id(call.data.split("VPN - ")[1])
        app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VPN –∫–ª—é—á–µ {vpn_obj.name}")
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"

        text = (
            f"üîë –ö–ª—é—á: {vpn_obj.name}\n"
            f"üìç –°–µ—Ä–≤–µ—Ä: {vpn_obj.server.location}\n"
            f"üì° –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üïí –°–æ–∑–¥–∞–Ω: {vpn_obj.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"üîó URL –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n`{vpn_obj.key}`"
        )

        if os.path.exists(vpn_obj.qr_code):
            with open(vpn_obj.qr_code, 'rb') as qr_file:
                bot.send_photo(call.message.chat.id, qr_file, caption=text,
                               parse_mode="Markdown",
                               reply_markup=user_key_actions_markup(vpn_obj.id))
        else:
            bot.send_message(call.message.chat.id, text,
                             reply_markup=user_key_actions_markup(vpn_obj.id))
        bot.set_state(call.message.chat.id, UserPanel.delete_vpn)
    elif "Cancel" in call.data:
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å–µ—Ä–≤–µ—Ä–æ–≤
        bot.send_message(call.message.chat.id, "‚úÖ –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        bot.set_state(call.message.chat.id, None)
    else:
        bot.set_state(call.message.chat.id, None)


@bot.callback_query_handler(func=None, state=UserPanel.delete_vpn)
def user_vpn_delete_handler(call):
    """ –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN –∫–ª—é—á–∞–º–∏ (–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–¥ –∫–ª—é—á–æ–º) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º """
    bot.answer_callback_query(callback_query_id=call.id)
    cur_user = User.get(User.user_id == call.from_user.id)

    if "action_" in call.data:
        action, key_id = call.data.split("_")[1], call.data.split("_")[2]
        vpn_key = VPNKey.get_by_id(key_id)

        if action == "revoke":
            app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.message.from_user.full_name} –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–∑—ã–≤ VPN –∫–ª—é—á–∞ {vpn_key.name}")

            UserVPNKey.delete().where(UserVPNKey.vpn_key == vpn_key).execute()
            bot.send_message(call.message.chat.id,
                             f"‚åõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ... –ò–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ {vpn_key.name}...")
            if revoke_key(vpn_key):
                bot.send_message(call.message.chat.id, f"üóë –ö–ª—é—á {vpn_key.name} –æ—Ç–æ–∑–≤–∞–Ω")
                bot.send_message(call.message.chat.id, "üîë –í–∞—à–∏ VPN –∫–ª—é—á–∏ üëá",
                                 reply_markup=user_panel_markup(cur_user),
                                 parse_mode="HTML")
            else:
                bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –∫–ª—é—á–∞!")
        bot.set_state(call.message.chat.id, UserPanel.get_keys)

    elif "Exit" in call.data:
        bot.send_message(call.message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        bot.send_message(call.message.chat.id, "üîë –í–∞—à–∏ VPN –∫–ª—é—á–∏ üëá",
                         reply_markup=user_panel_markup(cur_user),
                         parse_mode="HTML")
        app_logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {call.from_user.full_name} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        bot.set_state(call.message.chat.id, UserPanel.get_keys)
        return
    else:
        bot.set_state(call.message.chat.id, None)
        bot.send_message(call.message.chat.id, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
